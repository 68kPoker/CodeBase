head     1.1;
branch   ;
access   ;
symbols  ;
locks    Robert:1.1; strict;
comment  @ * @;


1.1
date     120.12.01.19.47.17;  author Robert;  state Exp;
branches ;
next     ;


desc
@Praca na plikach IFF
@



1.1
log
@Initial revision
@
text
@
/* $Log$ */

/* Praca z plikami IFF */

#include <dos/dos.h>
#include <libraries/iffparse.h>
#include <datatypes/pictureclass.h>
#include <exec/memory.h>

#include <clib/exec_protos.h>
#include <clib/dos_protos.h>
#include <clib/iffparse_protos.h>
#include <clib/graphics_protos.h>
#include <clib/datatypes_protos.h>

#include "IFF.h"

#define BODY_BUF_SIZE 2048

#define RGB(k) ((k)|((k)<<8)|((k)<<16)|((k)<<24))

struct buffer
{
    BYTE *start, *current;
    LONG size, left;
};

struct IFFHandle *otworzIFF(STRPTR name)
{
    struct IFFHandle *iff;

    if (iff = AllocIFF())
    {
        if (iff->iff_Stream = Open(name, MODE_OLDFILE))
        {
            InitIFFasDOS(iff);
            if (OpenIFF(iff, IFFF_READ) == 0)
            {
                return(iff);
            }
            Close(iff->iff_Stream);
        }
        FreeIFF(iff);
    }
    return(NULL);
}

void zamknijIFF(struct IFFHandle *iff)
{
    CloseIFF(iff);
    Close(iff->iff_Stream);
    FreeIFF(iff);
}

BOOL przeskanujILBM(struct IFFHandle *iff)
{
    if (PropChunk(iff, ID_ILBM, ID_BMHD) == 0)
    {
        if (PropChunk(iff, ID_ILBM, ID_CMAP) == 0)
        {
            if (StopChunk(iff, ID_ILBM, ID_BODY) == 0)
            {
                if (ParseIFF(iff, IFFPARSE_SCAN) == 0)
                {
                    return(TRUE);
                }
            }
        }
    }
    return(FALSE);
}

BOOL wczytajKolory(struct IFFHandle *iff, struct ColorMap *cm)
{
    struct StoredProperty *sp;

    if (sp = FindProp(iff, ID_ILBM, ID_CMAP))
    {
        UBYTE *cmap = sp->sp_Data;
        WORD colors = sp->sp_Size / 3;
        WORD i;
        for (i = 0; i < colors; i++)
        {
            UBYTE red = *cmap++, green = *cmap++, blue = *cmap++;
            SetRGB32CM(cm, i, RGB(red), RGB(green), RGB(blue));
        }
        return(TRUE);
    }
    return(FALSE);
}

LONG readChunkBytes(struct IFFHandle *iff, struct buffer *buf, BYTE *dest, LONG amount)
{
    LONG sum = 0, min;

    while (amount > 0)
    {
        if (buf->left == 0)
        {
            if ((buf->left = ReadChunkBytes(iff, buf->start, buf->size)) == 0)
            {
                return(sum);
            }
            buf->current = buf->start;
        }
        min = amount < buf->left ? amount : buf->left;
        CopyMem(buf->current, dest, min);
        buf->current += min;
        dest += min;
        sum += min;

        amount -= min;
        buf->left -= min;
    }
    return(sum);
}

BOOL wczytajObrazek(struct IFFHandle *iff, struct BitMap *bm, PLANEPTR mask)
{
    struct StoredProperty *sp;
    BOOL success = TRUE;

    if (sp = FindProp(iff, ID_ILBM, ID_BMHD))
    {
        struct BitMapHeader *bmhd = (struct BitMapHeader *)sp->sp_Data;

        if (bmhd->bmh_Width  == GetBitMapAttr(bm, BMA_WIDTH)   &&
            bmhd->bmh_Height == GetBitMapAttr(bm, BMA_HEIGHT) &&
            bmhd->bmh_Depth  == GetBitMapAttr(bm, BMA_DEPTH))
        {
            PLANEPTR planes[9];
            WORD i, j;
            WORD bpr = RowBytes(bmhd->bmh_Width);
            struct buffer buf;

            for (i = 0; i < bmhd->bmh_Depth; i++)
            {
                planes[i] = bm->Planes[i];
            }

            if (bmhd->bmh_Masking == mskHasMask)
            {
                planes[bmhd->bmh_Depth++] = mask;
            }

            if (buf.start = AllocMem(buf.size = BODY_BUF_SIZE, MEMF_PUBLIC))
            {
                buf.left = 0;
                for (j = 0; j < bmhd->bmh_Height; j++)
                {
                    for (i = 0; i < bmhd->bmh_Depth; i++)
                    {
                        if (bmhd->bmh_Compression == cmpNone)
                        {
                            if (readChunkBytes(iff, &buf, planes[i], bpr) != bpr)
                            {
                                success = FALSE;
                                break;
                            }
                        }
                        else if (bmhd->bmh_Compression == cmpByteRun1)
                        {
                            WORD curbpr = bpr;
                            BYTE *dest = planes[i];

                            while (curbpr > 0)
                            {
                                BYTE con;
                                if (readChunkBytes(iff, &buf, &con, 1) != 1)
                                {
                                    success = FALSE;
                                    break;
                                }
                                if (con >= 0)
                                {
                                    WORD count = con + 1;
                                    if (curbpr < count || readChunkBytes(iff, &buf, dest, count) != count)
                                    {
                                        success = FALSE;
                                        break;
                                    }
                                    curbpr -= count;
                                }
                                else if (con != -128)
                                {
                                    WORD count = (-con) + 1;
                                    BYTE data;
                                    if (curbpr < count || readChunkBytes(iff, &buf, &data, 1) != 1)
                                    {
                                        success = FALSE;
                                        break;
                                    }
                                    curbpr -= count;
                                    while (count-- > 0)
                                    {
                                        *dest++ = data;
                                    }
                                }
                            }
                            if (!success)
                            {
                                break;
                            }
                        }
                        else
                        {
                            success = FALSE;
                            break;
                        }
                        planes[i] += bpr;
                    }
                }
                FreeMem(buf.start, buf.size);
                return(success);
            }
        }
    }
    return(FALSE);
}
@
